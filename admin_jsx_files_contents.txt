FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/positions/create/page.jsx
FILE CONTENTS:
"use client"
import React from 'react'
import { useForm } from '@inertiajs/inertia-react'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'

export default function CreatePosition({ elections }) {
  const { data, setData, post, processing, errors } = useForm({
    positionName: '',
    electionId: '',
    description: ''
  })

  function handleSubmit(e) {
    e.preventDefault()
    // Directly posting to the endpoint as defined in your routes
    post('/admin/positions')
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <Card className="p-6">
        <h1 className="text-2xl font-bold mb-4">Create Position</h1>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <Label htmlFor="positionName">Position Name</Label>
            <Input
              id="positionName"
              type="text"
              value={data.positionName}
              onChange={(e) => setData('positionName', e.target.value)}
              className="mt-1 block w-full"
            />
            {errors.positionName && (
              <div className="text-red-600 text-sm">{errors.positionName}</div>
            )}
          </div>

          <div className="mb-4">
            <Label htmlFor="electionId">Election</Label>
            <select
              id="electionId"
              value={data.electionId}
              onChange={(e) => setData('electionId', e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md p-2"
            >
              <option value="">Select an election</option>
              {elections.map((election) => (
                <option key={election.id} value={election.id}>
                  {election.title}
                </option>
              ))}
            </select>
            {errors.electionId && (
              <div className="text-red-600 text-sm">{errors.electionId}</div>
            )}
          </div>

          <div className="mb-4">
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              value={data.description}
              onChange={(e) => setData('description', e.target.value)}
              className="mt-1 block w-full"
              rows={4}
            />
            {errors.description && (
              <div className="text-red-600 text-sm">{errors.description}</div>
            )}
          </div>

          <Button type="submit" disabled={processing}>
            Create Position
          </Button>
        </form>
      </Card>
    </div>
  )
}
---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/positions/[id]/edit/page.jsx
FILE CONTENTS:
"use client"
import React from 'react'
import { useForm, Link } from '@inertiajs/inertia-react'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'

export default function EditPosition({ position, elections }) {
  const { data, setData, put, processing, errors } = useForm({
    positionName: position.name || '',
    electionId: position.election_id || '',
    description: position.description || '',
  })

  function handleSubmit(e) {
    e.preventDefault()
    put(`/admin/positions/${position.id}`)
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <Card className="p-6">
        <h1 className="text-2xl font-bold mb-4">Edit Position</h1>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <Label htmlFor="positionName">Position Name</Label>
            <Input
              id="positionName"
              type="text"
              value={data.positionName}
              onChange={(e) => setData('positionName', e.target.value)}
              className="mt-1 block w-full"
            />
            {errors.positionName && (
              <div className="text-red-600 text-sm">{errors.positionName}</div>
            )}
          </div>

          <div className="mb-4">
            <Label htmlFor="electionId">Election</Label>
            <select
              id="electionId"
              value={data.electionId}
              onChange={(e) => setData('electionId', e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md p-2"
            >
              <option value="">Select an election</option>
              {elections.map((election) => (
                <option key={election.id} value={election.id}>
                  {election.title}
                </option>
              ))}
            </select>
            {errors.electionId && (
              <div className="text-red-600 text-sm">{errors.electionId}</div>
            )}
          </div>

          <div className="mb-4">
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              value={data.description}
              onChange={(e) => setData('description', e.target.value)}
              className="mt-1 block w-full"
              rows={4}
            />
            {errors.description && (
              <div className="text-red-600 text-sm">{errors.description}</div>
            )}
          </div>

          <div className="flex space-x-4">
            <Button type="submit" disabled={processing}>
              Update Position
            </Button>
            <Link href="/admin/positions">
              <Button variant="outline">Cancel</Button>
            </Link>
          </div>
        </form>
      </Card>
    </div>
  )
}
---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/positions/loading.jsx
FILE CONTENTS:
"use client"

import React from "react"

export default function Loading() {
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="text-center">
        <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500 mx-auto"></div>
        <p className="mt-4 text-lg font-medium">Loading positionsâ€¦</p>
      </div>
    </div>
  )
}
---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/positions/page.jsx
FILE CONTENTS:
"use client"

import React, { useState } from "react"
import { Inertia } from '@inertiajs/inertia'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { PlusCircle, Trash2 } from "lucide-react"
import { Link } from "@inertiajs/react"

export default function PositionsPage({ positions }) {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedElection, setSelectedElection] = useState("")

  // Delete handler using Inertia
  function handleDelete(id) {
    if (window.confirm("Are you sure you want to delete this position?")) {
      Inertia.delete(`/admin/positions/${id}`)
    }
  }

  // Filter positions based on search term and election selection
  const filteredPositions = positions.filter((position) => {
    const matchesSearch = position.name.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesElection = selectedElection
      ? position.election.id.toString() === selectedElection
      : true
    return matchesSearch && matchesElection
  })

  return (
    <div className="space-y-6">
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Positions</h2>
          <p className="text-muted-foreground">Manage positions across elections.</p>
        </div>
        <div className="flex items-center gap-2">
          <Input
            type="text"
            placeholder="Search positions..."
            className="w-48"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <Button asChild>
            <Link href="/admin/positions/create">
              <PlusCircle className="mr-2 h-4 w-4" />
              Create Position
            </Link>
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader className="flex flex-row items-center">
          <CardTitle>All Positions</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableCell>Name</TableCell>
                <TableCell>Election</TableCell>
                <TableCell className="text-right">Actions</TableCell>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredPositions.map((position) => (
                <TableRow key={position.id}>
                  <TableCell className="font-medium">{position.name}</TableCell>
                  <TableCell>{position.election.title}</TableCell>
                  <TableCell className="text-right space-x-2">
                    <Button variant="ghost" size="sm" asChild>
                      <Link href={`/admin/positions/${position.id}/edit`}>Edit</Link>
                    </Button>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      className="text-destructive" 
                      onClick={() => handleDelete(position.id)}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
              {filteredPositions.length === 0 && (
                <TableRow>
                  <TableCell colSpan={3} className="text-center">
                    No positions found.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  )
}
---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/candidates/create/page.jsx
FILE CONTENTS:
"use client"

import React, { useState, useEffect } from "react"
import { useForm, Head } from "@inertiajs/react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { AlertCircle, Upload, Image as ImageIcon, X } from "lucide-react"

export default function CreateCandidate({ elections, positions }) {
  const { data, setData, post, processing, errors } = useForm({
    name: "",
    bio: "",
    motto: "",
    election_id: "",
    position_id: "",
    photo: null,
  })

  // State to store filtered positions based on selected election
  const [filteredPositions, setFilteredPositions] = useState([])
  
  // State to store image preview
  const [photoPreview, setPhotoPreview] = useState(null)

  // Update filtered positions whenever election_id changes
  useEffect(() => {
    if (data.election_id) {
      const electionId = parseInt(data.election_id)
      const filtered = positions.filter(position => position.election_id === electionId)
      setFilteredPositions(filtered)
      
      // Reset position_id if current selection is not valid for the new election
      if (data.position_id) {
        const isValidPosition = filtered.some(position => position.id === parseInt(data.position_id))
        if (!isValidPosition) {
          setData("position_id", "")
        }
      }
    } else {
      setFilteredPositions([])
      setData("position_id", "")
    }
  }, [data.election_id, positions])

  function handleSubmit(e) {
    e.preventDefault()
    post("/admin/candidates", { forceFormData: true })
  }

  function handleFileChange(e) {
    const file = e.target.files[0]
    setData("photo", file)
    
    // Create and set image preview
    if (file) {
      const reader = new FileReader()
      reader.onload = (e) => {
        setPhotoPreview(e.target.result)
      }
      reader.readAsDataURL(file)
    } else {
      setPhotoPreview(null)
    }
  }
  
  function removePhoto() {
    setData("photo", null)
    setPhotoPreview(null)
    // Reset the file input
    document.getElementById('photo').value = ''
  }

  return (
    <>
      <Head title="Create Candidate" />
      <div className="max-w-2xl mx-auto py-8">
        <Card>
          <CardHeader>
            <CardTitle>Create Candidate</CardTitle>
            <CardDescription>Add a new candidate to an election position</CardDescription>
          </CardHeader>
          <CardContent>
            <form
              onSubmit={handleSubmit}
              encType="multipart/form-data"
              className="space-y-6"
            >
              {/* Candidate Name */}
              <div>
                <label htmlFor="name" className="block font-medium mb-1">
                  Name
                </label>
                <Input
                  id="name"
                  type="text"
                  value={data.name}
                  onChange={(e) => setData("name", e.target.value)}
                  className="mt-1 block w-full"
                  placeholder="Enter candidate name"
                  required
                />
                {errors.name && (
                  <div className="text-destructive text-sm mt-1">{errors.name}</div>
                )}
              </div>

              {/* Candidate Bio */}
              <div>
                <label htmlFor="bio" className="block font-medium mb-1">
                  Bio
                </label>
                <textarea
                  id="bio"
                  value={data.bio}
                  onChange={(e) => setData("bio", e.target.value)}
                  className="mt-1 block w-full border border-gray-300 rounded p-2 min-h-[120px]"
                  rows="4"
                  placeholder="Enter candidate biography"
                ></textarea>
                {errors.bio && (
                  <div className="text-destructive text-sm mt-1">{errors.bio}</div>
                )}
              </div>

              {/* Candidate Motto */}
              <div>
                <label htmlFor="motto" className="block font-medium mb-1">
                  Motto
                </label>
                <Input
                  id="motto"
                  type="text"
                  value={data.motto}
                  onChange={(e) => setData("motto", e.target.value)}
                  className="mt-1 block w-full"
                  placeholder="Enter candidate motto or slogan"
                />
                {errors.motto && (
                  <div className="text-destructive text-sm mt-1">{errors.motto}</div>
                )}
              </div>

              {/* Improved Photo Upload */}
              <div>
                <label htmlFor="photo" className="block font-medium mb-2">
                  Candidate Photo
                </label>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 items-start">
                  {/* Upload Area */}
                  <div 
                    className={`border-2 border-dashed rounded-lg p-4 text-center hover:bg-gray-50 transition-colors ${
                      errors.photo ? 'border-red-300' : 'border-gray-300'
                    }`}
                  >
                    <input
                      id="photo"
                      type="file"
                      accept="image/*"
                      onChange={handleFileChange}
                      className="hidden"
                    />
                    
                    <label htmlFor="photo" className="cursor-pointer block">
                      <div className="flex flex-col items-center justify-center py-3">
                        <Upload className="h-10 w-10 text-gray-400 mb-2" />
                        <p className="text-sm font-medium text-gray-700">Click to upload</p>
                        <p className="text-xs text-gray-500 mt-1">
                          PNG, JPG, GIF up to 5MB
                        </p>
                      </div>
                    </label>
                  </div>
                  
                  {/* Preview Area */}
                  <div className="border rounded-lg p-2 bg-gray-50 aspect-square flex items-center justify-center overflow-hidden">
                    {photoPreview ? (
                      <div className="relative w-full h-full">
                        <img 
                          src={photoPreview} 
                          alt="Candidate preview" 
                          className="w-full h-full object-cover rounded"
                        />
                        <button
                          type="button"
                          onClick={removePhoto}
                          className="absolute top-2 right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600"
                          title="Remove photo"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      </div>
                    ) : (
                      <div className="text-center text-gray-400">
                        <ImageIcon className="h-12 w-12 mx-auto mb-2" />
                        <p className="text-sm">Photo preview</p>
                      </div>
                    )}
                  </div>
                </div>
                
                {errors.photo && (
                  <div className="text-destructive text-sm mt-1">{errors.photo}</div>
                )}
              </div>

              {/* Election and Position Section */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Election Dropdown */}
                <div>
                  <label htmlFor="election_id" className="block font-medium mb-1">
                    Election
                  </label>
                  <select
                    id="election_id"
                    value={data.election_id}
                    onChange={(e) => setData("election_id", e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded p-2 h-10"
                    required
                  >
                    <option value="">Select an Election</option>
                    {elections.map((election) => (
                      <option key={election.id} value={election.id}>
                        {election.title}
                      </option>
                    ))}
                  </select>
                  {errors.election_id && (
                    <div className="text-destructive text-sm mt-1">{errors.election_id}</div>
                  )}
                </div>

                {/* Position Dropdown - Filtered by election */}
                <div>
                  <label htmlFor="position_id" className="block font-medium mb-1">
                    Position
                  </label>
                  <select
                    id="position_id"
                    value={data.position_id}
                    onChange={(e) => setData("position_id", e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded p-2 h-10"
                    disabled={!data.election_id}
                    required
                  >
                    <option value="">Select a Position</option>
                    {filteredPositions.map((position) => (
                      <option key={position.id} value={position.id}>
                        {position.name}
                      </option>
                    ))}
                  </select>
                  {errors.position_id && (
                    <div className="text-destructive text-sm mt-1">{errors.position_id}</div>
                  )}
                </div>
              </div>
              
              {/* Show warning if no positions available */}
              {data.election_id && filteredPositions.length === 0 && (
                <Alert className="border-amber-500 bg-amber-50">
                  <AlertCircle className="h-4 w-4 text-amber-600" />
                  <AlertDescription className="text-amber-600">
                    No positions available for this election. Please create positions first.
                  </AlertDescription>
                </Alert>
              )}

              {/* Form Actions */}
              <div className="flex justify-end pt-4 border-t">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => window.history.back()} 
                  className="mr-2"
                >
                  Cancel
                </Button>
                <Button type="submit" disabled={processing}>
                  {processing ? "Creating..." : "Create Candidate"}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    </>
  )
}---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/candidates/[id]/edit/page.jsx
FILE CONTENTS:
"use client"

import React, { useState, useEffect } from "react"
import { useForm, Head } from "@inertiajs/react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { AlertCircle, Upload, Image as ImageIcon, X } from "lucide-react"

export default function EditCandidate({ candidate, elections, positions }) {
  const { data, setData, put, processing, errors } = useForm({
    name: candidate.name || "",
    bio: candidate.bio || "",
    motto: candidate.motto || "",
    election_id: candidate.election_id || "",
    position_id: candidate.position_id || "",
    photo: null,
    _method: 'PUT', // Add this for Laravel's form method spoofing
  })

  // State to store filtered positions based on selected election
  const [filteredPositions, setFilteredPositions] = useState([])
  
  // State to store image preview
  const [photoPreview, setPhotoPreview] = useState(candidate.photo || null)

  // Update filtered positions whenever election_id changes
  useEffect(() => {
    if (data.election_id) {
      const electionId = parseInt(data.election_id)
      const filtered = positions.filter(position => position.election_id === electionId)
      setFilteredPositions(filtered)
      
      // Reset position_id if current selection is not valid for the new election
      if (data.position_id) {
        const isValidPosition = filtered.some(position => position.id === parseInt(data.position_id))
        if (!isValidPosition) {
          setData("position_id", "")
        }
      }
    } else {
      setFilteredPositions([])
      setData("position_id", "")
    }
  }, [data.election_id, positions])

  function handleSubmit(e) {
    e.preventDefault()
    
    // Prepare FormData to handle file upload
    const formData = new FormData()
    
    // Append all form fields
    formData.append('name', data.name)
    formData.append('bio', data.bio || '')
    formData.append('motto', data.motto || '')
    formData.append('election_id', data.election_id)
    formData.append('position_id', data.position_id)
    
    // Append photo if a new file is selected
    if (data.photo) {
      formData.append('photo', data.photo)
    }
    
    // Add method spoofing for Laravel
    formData.append('_method', 'PUT')
    
    // Submit the form
    put(`/admin/candidates/${candidate.id}`, { 
      data: formData,
      forceFormData: true 
    })
  }

  function handleFileChange(e) {
    const file = e.target.files[0]
    setData("photo", file)
    
    // Create and set image preview
    if (file) {
      const reader = new FileReader()
      reader.onload = (e) => {
        setPhotoPreview(e.target.result)
      }
      reader.readAsDataURL(file)
    } else {
      setPhotoPreview(candidate.photo)
    }
  }
  
  function removePhoto() {
    setData("photo", null)
    setPhotoPreview(null)
    // Reset the file input
    document.getElementById('photo').value = ''
  }

  return (
    <>
      <Head title="Edit Candidate" />
      <div className="max-w-2xl mx-auto py-8">
        <Card>
          <CardHeader>
            <CardTitle>Edit Candidate</CardTitle>
            <CardDescription>Update candidate details for an election position</CardDescription>
          </CardHeader>
          <CardContent>
            <form
              onSubmit={handleSubmit}
              encType="multipart/form-data"
              className="space-y-6"
            >
              {/* Candidate Name */}
              <div>
                <label htmlFor="name" className="block font-medium mb-1">
                  Name
                </label>
                <Input
                  id="name"
                  type="text"
                  value={data.name}
                  onChange={(e) => setData("name", e.target.value)}
                  className="mt-1 block w-full"
                  placeholder="Enter candidate name"
                  required
                />
                {errors.name && (
                  <div className="text-destructive text-sm mt-1">{errors.name}</div>
                )}
              </div>

              {/* Candidate Bio */}
              <div>
                <label htmlFor="bio" className="block font-medium mb-1">
                  Bio
                </label>
                <textarea
                  id="bio"
                  value={data.bio}
                  onChange={(e) => setData("bio", e.target.value)}
                  className="mt-1 block w-full border border-gray-300 rounded p-2 min-h-[120px]"
                  rows="4"
                  placeholder="Enter candidate biography"
                ></textarea>
                {errors.bio && (
                  <div className="text-destructive text-sm mt-1">{errors.bio}</div>
                )}
              </div>

              {/* Candidate Motto */}
              <div>
                <label htmlFor="motto" className="block font-medium mb-1">
                  Motto
                </label>
                <Input
                  id="motto"
                  type="text"
                  value={data.motto}
                  onChange={(e) => setData("motto", e.target.value)}
                  className="mt-1 block w-full"
                  placeholder="Enter candidate motto or slogan"
                />
                {errors.motto && (
                  <div className="text-destructive text-sm mt-1">{errors.motto}</div>
                )}
              </div>

              {/* Improved Photo Upload */}
              <div>
                <label htmlFor="photo" className="block font-medium mb-2">
                  Candidate Photo
                </label>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 items-start">
                  {/* Upload Area */}
                  <div 
                    className={`border-2 border-dashed rounded-lg p-4 text-center hover:bg-gray-50 transition-colors ${
                      errors.photo ? 'border-red-300' : 'border-gray-300'
                    }`}
                  >
                    <input
                      id="photo"
                      type="file"
                      accept="image/*"
                      onChange={handleFileChange}
                      className="hidden"
                    />
                    
                    <label htmlFor="photo" className="cursor-pointer block">
                      <div className="flex flex-col items-center justify-center py-3">
                        <Upload className="h-10 w-10 text-gray-400 mb-2" />
                        <p className="text-sm font-medium text-gray-700">Click to upload</p>
                        <p className="text-xs text-gray-500 mt-1">
                          PNG, JPG, GIF up to 5MB
                        </p>
                      </div>
                    </label>
                  </div>
                  
                  {/* Preview Area */}
                  <div className="border rounded-lg p-2 bg-gray-50 aspect-square flex items-center justify-center overflow-hidden">
                    {photoPreview ? (
                      <div className="relative w-full h-full">
                        <img 
                          src={photoPreview} 
                          alt="Candidate preview" 
                          className="w-full h-full object-cover rounded"
                        />
                        <button
                          type="button"
                          onClick={removePhoto}
                          className="absolute top-2 right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600"
                          title="Remove photo"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      </div>
                    ) : (
                      <div className="text-center text-gray-400">
                        <ImageIcon className="h-12 w-12 mx-auto mb-2" />
                        <p className="text-sm">Photo preview</p>
                      </div>
                    )}
                  </div>
                </div>
                
                {errors.photo && (
                  <div className="text-destructive text-sm mt-1">{errors.photo}</div>
                )}
              </div>

              {/* Election and Position Section */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Election Dropdown */}
                <div>
                  <label htmlFor="election_id" className="block font-medium mb-1">
                    Election
                  </label>
                  <select
                    id="election_id"
                    value={data.election_id}
                    onChange={(e) => setData("election_id", e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded p-2 h-10"
                    required
                  >
                    <option value="">Select an Election</option>
                    {elections.map((election) => (
                      <option key={election.id} value={election.id}>
                        {election.title}
                      </option>
                    ))}
                  </select>
                  {errors.election_id && (
                    <div className="text-destructive text-sm mt-1">{errors.election_id}</div>
                  )}
                </div>

                {/* Position Dropdown - Filtered by election */}
                <div>
                  <label htmlFor="position_id" className="block font-medium mb-1">
                    Position
                  </label>
                  <select
                    id="position_id"
                    value={data.position_id}
                    onChange={(e) => setData("position_id", e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded p-2 h-10"
                    disabled={!data.election_id}
                    required
                  >
                    <option value="">Select a Position</option>
                    {filteredPositions.map((position) => (
                      <option key={position.id} value={position.id}>
                        {position.name}
                      </option>
                    ))}
                  </select>
                  {errors.position_id && (
                    <div className="text-destructive text-sm mt-1">{errors.position_id}</div>
                  )}
                </div>
              </div>
              
              {/* Show warning if no positions available */}
              {data.election_id && filteredPositions.length === 0 && (
                <Alert className="border-amber-500 bg-amber-50">
                  <AlertCircle className="h-4 w-4 text-amber-600" />
                  <AlertDescription className="text-amber-600">
                    No positions available for this election. Please create positions first.
                  </AlertDescription>
                </Alert>
              )}

              {/* Form Actions */}
              <div className="flex justify-end pt-4 border-t">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => window.history.back()} 
                  className="mr-2"
                >
                  Cancel
                </Button>
                <Button type="submit" disabled={processing}>
                  {processing ? "Updating..." : "Update Candidate"}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    </>
  )
}---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/candidates/page.jsx
FILE CONTENTS:
"use client"

import React, { useState } from "react"
import { Inertia } from "@inertiajs/inertia"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { PlusCircle, Search, Trash2 } from "lucide-react"
import { Link } from "@inertiajs/react"

export default function CandidatesPage({ candidates }) {
  const [searchTerm, setSearchTerm] = useState("")

  // Filter candidates based on search term (by candidate name)
  const filteredCandidates = candidates.filter(candidate =>
    candidate.name.toLowerCase().includes(searchTerm.toLowerCase())
  )

  // Delete handler using Inertia
  const handleDelete = (id) => {
    if (window.confirm("Are you sure you want to delete this candidate?")) {
      Inertia.delete(`/admin/candidates/${id}`)
    }
  }

  return (
    <div className="space-y-6">
      {/* Header Section */}
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Candidates</h2>
          <p className="text-muted-foreground">
            Manage candidates and their associations with elections and positions.
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Input
            type="text"
            placeholder="Search candidates..."
            className="w-48"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <Button asChild>
            <Link href="/admin/candidates/create">
              <PlusCircle className="mr-2 h-4 w-4" />
              Create Candidate
            </Link>
          </Button>
        </div>
      </div>

      {/* Candidates Table */}
      <Card>
        <CardHeader className="flex flex-row items-center">
          <CardTitle>All Candidates</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableCell>Name</TableCell>
                <TableCell>Election</TableCell>
                <TableCell>Position</TableCell>
                <TableCell className="hidden md:table-cell">Bio</TableCell>
                <TableCell className="text-right">Actions</TableCell>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredCandidates.map((candidate) => (
                <TableRow key={candidate.id}>
                  <TableCell className="font-medium">{candidate.name}</TableCell>
                  <TableCell>{candidate.election.title}</TableCell>
                  <TableCell>{candidate.position.name}</TableCell>
                  <TableCell className="hidden md:table-cell">
                    {candidate.bio ? candidate.bio.substring(0, 50) + "..." : "N/A"}
                  </TableCell>
                  <TableCell className="text-right space-x-2">
                    <Button variant="ghost" size="sm" asChild>
                      <Link href={`/admin/candidates/${candidate.id}/edit`}>Edit</Link>
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="text-destructive"
                      onClick={() => handleDelete(candidate.id)}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
              {filteredCandidates.length === 0 && (
                <TableRow>
                  <TableCell colSpan={5} className="text-center">
                    No candidates found.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  )
}
---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/voters/[id]/edit/page.jsx
FILE CONTENTS:
"use client"

import React from "react"
import { useForm, Head } from "@inertiajs/react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"

export default function EditVoter({ voter, courses }) {
  const { data, setData, put, processing, errors } = useForm({
    admission_number: voter.admission_number || "",
    name: voter.name || "",
    email: voter.email || "",
    password: "", // leave blank to keep current password
    course_id: voter.course_id || "",
    year_of_study: voter.year_of_study || "",
    section: voter.section || "",
    is_candidate: voter.is_candidate || false, // optional flag to mark voter as candidate
  })

  function handleSubmit(e) {
    e.preventDefault()
    put(`/admin/voters/${voter.id}`, { forceFormData: true })
  }

  return (
    <>
      <Head title="Edit Voter" />
      <div className="max-w-2xl mx-auto py-8">
        <Card>
          <CardHeader>
            <CardTitle>Edit Voter</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              {/* Admission Number */}
              <div>
                <label htmlFor="admission_number" className="block font-medium">
                  Admission Number
                </label>
                <Input
                  id="admission_number"
                  type="text"
                  value={data.admission_number}
                  onChange={(e) => setData("admission_number", e.target.value)}
                  className="mt-1 block w-full"
                />
                {errors.admission_number && (
                  <div className="text-destructive text-sm mt-1">
                    {errors.admission_number}
                  </div>
                )}
              </div>

              {/* Name */}
              <div>
                <label htmlFor="name" className="block font-medium">
                  Name
                </label>
                <Input
                  id="name"
                  type="text"
                  value={data.name}
                  onChange={(e) => setData("name", e.target.value)}
                  className="mt-1 block w-full"
                />
                {errors.name && (
                  <div className="text-destructive text-sm mt-1">
                    {errors.name}
                  </div>
                )}
              </div>

              {/* Email */}
              <div>
                <label htmlFor="email" className="block font-medium">
                  Email
                </label>
                <Input
                  id="email"
                  type="email"
                  value={data.email}
                  onChange={(e) => setData("email", e.target.value)}
                  className="mt-1 block w-full"
                />
                {errors.email && (
                  <div className="text-destructive text-sm mt-1">
                    {errors.email}
                  </div>
                )}
              </div>

              {/* Password */}
              <div>
                <label htmlFor="password" className="block font-medium">
                  Password (Leave blank to keep current)
                </label>
                <Input
                  id="password"
                  type="password"
                  value={data.password}
                  onChange={(e) => setData("password", e.target.value)}
                  className="mt-1 block w-full"
                />
                {errors.password && (
                  <div className="text-destructive text-sm mt-1">
                    {errors.password}
                  </div>
                )}
              </div>

              {/* Course Dropdown */}
              <div>
                <label htmlFor="course_id" className="block font-medium">
                  Course
                </label>
                <select
                  id="course_id"
                  value={data.course_id}
                  onChange={(e) => setData("course_id", e.target.value)}
                  className="mt-1 block w-full border border-gray-300 rounded p-2"
                >
                  <option value="">Select a Course</option>
                  {courses.map((course) => (
                    <option key={course.id} value={course.id}>
                      {course.name}
                    </option>
                  ))}
                </select>
                {errors.course_id && (
                  <div className="text-destructive text-sm mt-1">
                    {errors.course_id}
                  </div>
                )}
              </div>

              {/* Year of Study */}
              <div>
                <label htmlFor="year_of_study" className="block font-medium">
                  Year of Study
                </label>
                <Input
                  id="year_of_study"
                  type="number"
                  value={data.year_of_study}
                  onChange={(e) => setData("year_of_study", e.target.value)}
                  className="mt-1 block w-full"
                />
                {errors.year_of_study && (
                  <div className="text-destructive text-sm mt-1">
                    {errors.year_of_study}
                  </div>
                )}
              </div>

              {/* Section Dropdown */}
              <div>
                <label htmlFor="section" className="block font-medium">
                  Section
                </label>
                <select
                  id="section"
                  value={data.section}
                  onChange={(e) => setData("section", e.target.value)}
                  className="mt-1 block w-full border border-gray-300 rounded p-2"
                >
                  <option value="">Select a Section</option>
                  <option value="A">A</option>
                  <option value="B">B</option>
                </select>
                {errors.section && (
                  <div className="text-destructive text-sm mt-1">
                    {errors.section}
                  </div>
                )}
              </div>

              {/* Mark as Candidate */}
              <div className="flex items-center gap-2">
                <input
                  id="is_candidate"
                  type="checkbox"
                  checked={data.is_candidate}
                  onChange={(e) => setData("is_candidate", e.target.checked)}
                  className="mt-1"
                />
                <label htmlFor="is_candidate" className="font-medium">
                  Mark as Candidate
                </label>
                {errors.is_candidate && (
                  <div className="text-destructive text-sm mt-1">
                    {errors.is_candidate}
                  </div>
                )}
              </div>

              {/* Form Actions */}
              <div className="flex justify-end">
                <Button type="submit" disabled={processing}>
                  Update Voter
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    </>
  )
}
---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/voters/import/page.jsx
FILE CONTENTS:
"use client"

import React, { useState } from "react"
import { useForm, Head } from "@inertiajs/react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"

export default function ImportVotersPage() {
  const { data, setData, post, processing, errors } = useForm({
    csv: null,
  })

  const [preview, setPreview] = useState(null)

  function handleFileChange(e) {
    const file = e.target.files[0]
    setData("csv", file)
    if (file) {
      setPreview({ name: file.name, size: file.size })
    }
  }

  function handleSubmit(e) {
    e.preventDefault()
    post("/admin/voters/import", { forceFormData: true })
  }

  return (
    <>
      <Head title="Import Voters" />
      <div className="max-w-xl mx-auto py-8">
        <Card>
          <CardHeader>
            <CardTitle>Import Voters CSV</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} encType="multipart/form-data" className="space-y-4">
              <div>
                <label htmlFor="csv" className="block font-medium">
                  CSV File
                </label>
                <Input
                  id="csv"
                  type="file"
                  accept=".csv"
                  onChange={handleFileChange}
                  className="mt-1 block w-full"
                />
                {errors.csv && (
                  <div className="text-destructive text-sm mt-1">{errors.csv}</div>
                )}
              </div>
              {preview && (
                <div className="mt-4">
                  <p>File Preview:</p>
                  <p>Name: {preview.name}</p>
                  <p>Size: {preview.size} bytes</p>
                </div>
              )}
              <div className="flex justify-end">
                <Button type="submit" disabled={processing}>
                  Import CSV
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    </>
  )
}
---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/voters/page.jsx
FILE CONTENTS:
"use client"

import React, { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Link } from "@inertiajs/react"

export default function VotersPage({ voters }) {
  const [searchTerm, setSearchTerm] = useState("")

  // Filter voters by admission number, name, or email.
  const filteredVoters = voters.filter((voter) => {
    return (
      voter.admission_number.toLowerCase().includes(searchTerm.toLowerCase()) ||
      voter.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      voter.email.toLowerCase().includes(searchTerm.toLowerCase())
    )
  })

  return (
    <div className="space-y-6">
      {/* Header with search and CSV import link */}
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Voters</h2>
          <p className="text-muted-foreground">Manage registered voters.</p>
        </div>
        <div className="flex items-center gap-2">
          <Input
            type="text"
            placeholder="Search voters..."
            className="w-48"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <Button asChild>
            <Link href="/admin/voters/import/page">Import CSV</Link>
          </Button>
        </div>
      </div>

      {/* Voters Table */}
      <Card>
        <CardHeader>
          <CardTitle>All Voters</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableCell>Admission Number</TableCell>
                <TableCell>Name</TableCell>
                <TableCell>Email</TableCell>
                <TableCell>Course</TableCell>
                <TableCell>Year</TableCell>
                <TableCell>Section</TableCell>
                <TableCell className="text-right">Actions</TableCell>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredVoters.map((voter) => (
                <TableRow key={voter.id}>
                  <TableCell>{voter.admission_number}</TableCell>
                  <TableCell>{voter.name}</TableCell>
                  <TableCell>{voter.email}</TableCell>
                  <TableCell>{voter.course?.name}</TableCell>
                  <TableCell>{voter.year_of_study}</TableCell>
                  <TableCell>{voter.section}</TableCell>
                  <TableCell className="text-right">
                    <Button variant="ghost" size="sm" asChild>
                      <Link href={`/admin/voters/${voter.id}/edit/page`}>Edit</Link>
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
              {filteredVoters.length === 0 && (
                <TableRow>
                  <TableCell colSpan={7} className="text-center">
                    No voters found.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  )
}
---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/elections/create/page.jsx
FILE CONTENTS:
"use client"

import React, { useState } from "react"
import { router } from "@inertiajs/react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { CalendarIcon, Plus, X } from "lucide-react"
import { cn } from "@/lib/utils"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { format } from "date-fns"
import { Link } from "@inertiajs/react"

export default function CreateElectionPage({ courses, sections }) {
  const [startDate, setStartDate] = useState(undefined)
  const [endDate, setEndDate] = useState(undefined)
  const [isActive, setIsActive] = useState(false)
  const [course, setCourse] = useState(null)
  const [section, setSection] = useState(null)
  const [positions, setPositions] = useState([])
  const [newPosition, setNewPosition] = useState("")

  const handleSubmit = (e) => {
    e.preventDefault()
    const form = e.currentTarget
    const title = form.querySelector("#title")?.value

    if (!startDate || !endDate) {
      alert("Please select both start and end dates for the election.")
      return
    }

    if (!section) {
      alert("Please select a section for the election.")
      return
    }

    if (positions.length === 0) {
      alert("Please add at least one position for the election.")
      return
    }

    const payload = {
      title,
      course_id: course,
      section,
      start_date: startDate,
      end_date: endDate,
      is_active: isActive,
      positions: positions
    }

    router.post("/admin/elections", payload, {
      onSuccess: () => {
        router.visit("/admin/elections")
      },
      onError: (errors) => {
        console.error(errors)
        alert("There was an error creating the election. Please check the form.")
      },
    })
  }

  const addPosition = () => {
    if (newPosition.trim() === "") return
    setPositions([...positions, { name: newPosition.trim() }])
    setNewPosition("")
  }

  const removePosition = (index) => {
    setPositions(positions.filter((_, i) => i !== index))
  }

  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault()
      addPosition()
    }
  }

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-3xl font-bold tracking-tight">Create Election</h2>
        <p className="text-muted-foreground">Create a new election with all required details.</p>
      </div>

      <form onSubmit={handleSubmit}>
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Election Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid gap-3">
                <Label htmlFor="title">Election Title</Label>
                <Input id="title" placeholder="Enter election title" required />
              </div>
              <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                <div className="grid gap-3">
                  <Label htmlFor="course">Course/Department (Optional)</Label>
                  <Select value={course} onValueChange={setCourse}>
                    <SelectTrigger id="course">
                      <SelectValue placeholder="Select course or department (optional)" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value={null}>None</SelectItem>
                      {courses && courses.map((course) => (
                        <SelectItem key={course.id} value={course.id.toString()}>
                          {course.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid gap-3">
                  <Label htmlFor="section">Section</Label>
                  <Select value={section} onValueChange={setSection} required>
                    <SelectTrigger id="section">
                      <SelectValue placeholder="Select section" />
                    </SelectTrigger>
                    <SelectContent>
                      {sections && sections.map((section, index) => (
                        <SelectItem key={index} value={section}>
                          {section}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                <div className="grid gap-3">
                  <Label>Start Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant="outline"
                        className={cn("w-full justify-start text-left font-normal", !startDate && "text-muted-foreground")}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {startDate ? format(startDate, "PPP") : "Select date"}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0">
                      <Calendar mode="single" selected={startDate} onSelect={setStartDate} initialFocus />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="grid gap-3">
                  <Label>End Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant="outline"
                        className={cn("w-full justify-start text-left font-normal", !endDate && "text-muted-foreground")}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {endDate ? format(endDate, "PPP") : "Select date"}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0">
                      <Calendar mode="single" selected={endDate} onSelect={setEndDate} initialFocus />
                    </PopoverContent>
                  </Popover>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <Switch id="active" checked={isActive} onCheckedChange={setIsActive} />
                <Label htmlFor="active">Active</Label>
              </div>
            </CardContent>
          </Card>

          {/* Election Positions Card */}
          <Card>
            <CardHeader>
              <CardTitle>Election Positions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-sm text-muted-foreground">
                Define positions that candidates can run for in this election (e.g., President, Secretary, Treasurer).
              </p>

              {/* Show added positions */}
              {positions.length > 0 && (
                <div className="space-y-2 mt-4">
                  {positions.map((position, index) => (
                    <div 
                      key={index} 
                      className="flex items-center justify-between p-3 bg-gray-50 rounded-md border"
                    >
                      <span className="font-medium">{position.name}</span>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => removePosition(index)}
                        className="h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-50"
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              )}

              {/* Add position input and button */}
              <div className="flex gap-2 mt-4">
                <Input 
                  value={newPosition}
                  onChange={(e) => setNewPosition(e.target.value)}
                  onKeyDown={handleKeyDown}
                  placeholder="Enter a position name (e.g., President)"
                  className="flex-1"
                />
                <Button 
                  type="button" 
                  onClick={addPosition}
                  disabled={!newPosition.trim()}
                  variant="secondary"
                >
                  <Plus className="h-4 w-4 mr-1" /> Add
                </Button>
              </div>
            </CardContent>
          </Card>

          <CardFooter className="flex justify-between px-0">
            <Button variant="outline" asChild>
              <Link href="/admin/elections">Cancel</Link>
            </Button>
            <Button type="submit">Create Election</Button>
          </CardFooter>
        </div>
      </form>
    </div>
  )
}---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/elections/[id]/edit/page.jsx
FILE CONTENTS:
"use client"

import React, { useState } from "react"
import { router } from "@inertiajs/react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { CalendarIcon } from "lucide-react"
import { cn } from "@/lib/utils"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { format } from "date-fns"
import { Link } from "@inertiajs/react"

export default function EditElectionPage({ election, courses, sections }) {
  const [title, setTitle] = useState(election.title)
  const [courseId, setCourseId] = useState(election.course_id ? election.course_id.toString() : "")
  const [section, setSection] = useState(election.section || "")
  const [startDate, setStartDate] = useState(new Date(election.start_date))
  const [endDate, setEndDate] = useState(new Date(election.end_date))
  const [isActive, setIsActive] = useState(election.is_active)

  const handleSubmit = (e) => {
    e.preventDefault()
    const payload = {
      title,
      course_id: courseId === "" ? null : courseId, // Convert empty string to null
      section,
      start_date: startDate,
      end_date: endDate,
      is_active: isActive,
    }
    router.put(`/admin/elections/${election.id}`, payload, {
      onSuccess: () => {
        router.visit("/admin/elections")
      },
      onError: (errors) => {
        console.error(errors)
      },
    })
  }

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-3xl font-bold tracking-tight">Edit Election</h2>
        <p className="text-muted-foreground">Update the details for this election.</p>
      </div>

      <form onSubmit={handleSubmit}>
        <Card>
          <CardHeader>
            <CardTitle>Election Details</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid gap-3">
              <Label htmlFor="title">Election Title</Label>
              <Input id="title" value={title} onChange={(e) => setTitle(e.target.value)} required />
            </div>
            <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
              <div className="grid gap-3">
                <Label htmlFor="course">Course/Department</Label>
                <Select value={courseId} onValueChange={setCourseId}>
                  <SelectTrigger id="course">
                    <SelectValue placeholder="Select course or department" />
                  </SelectTrigger>
                  <SelectContent>
                    {courses.map((course) => (
                      <SelectItem key={course.id} value={course.id.toString()}>
                        {course.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="grid gap-3">
                <Label htmlFor="section">Section</Label>
                <Select value={section} onValueChange={setSection} required>
                  <SelectTrigger id="section">
                    <SelectValue placeholder="Select section" />
                  </SelectTrigger>
                  <SelectContent>
                    {sections.map((s, index) => (
                      <SelectItem key={index} value={s}>
                        {s}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
              <div className="grid gap-3">
                <Label>Start Date</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className={cn("w-full justify-start text-left font-normal", !startDate && "text-muted-foreground")}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {startDate ? format(startDate, "PPP") : "Select date"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar mode="single" selected={startDate} onSelect={setStartDate} initialFocus />
                  </PopoverContent>
                </Popover>
              </div>
              <div className="grid gap-3">
                <Label>End Date</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className={cn("w-full justify-start text-left font-normal", !endDate && "text-muted-foreground")}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {endDate ? format(endDate, "PPP") : "Select date"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar mode="single" selected={endDate} onSelect={setEndDate} initialFocus />
                  </PopoverContent>
                </Popover>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Switch id="active" checked={isActive} onCheckedChange={setIsActive} />
              <Label htmlFor="active">Active</Label>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button variant="outline" asChild>
              <Link href="/admin/elections">Cancel</Link>
            </Button>
            <Button type="submit">Update Election</Button>
          </CardFooter>
        </Card>
      </form>
    </div>
  )
}
---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/elections/[id]/page.jsx
FILE CONTENTS:
"use client"

import React from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Link, router } from "@inertiajs/react"
import { Button } from "@/components/ui/button"
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { Badge } from "@/components/ui/badge"
import { UserCircle, Calendar, AlertTriangle } from "lucide-react"

export default function ElectionDetailsPage({ election, positions, candidates }) {
  // Handle delete election
  const handleDelete = () => {
    if (confirm("Are you sure you want to delete this election? This will also delete all associated positions and candidates.")) {
      router.delete(`/admin/elections/${election.id}`)
    }
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">{election.title}</h2>
          <p className="text-muted-foreground mt-1">
            {election.course ? election.course.name : "No Course"} â€¢ {election.section} â€¢ {election.start_date} to {election.end_date}
          </p>
          <div className="mt-2">
            <Badge variant={election.is_active ? "success" : "secondary"}>
              {election.is_active ? "Active" : "Inactive"}
            </Badge>
          </div>
        </div>
        <div className="flex gap-2">
          <Link href={`/admin/elections/${election.id}/edit`}>
            <Button variant="outline">Edit Election</Button>
          </Link>
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button variant="destructive">Delete</Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                <AlertDialogDescription>
                  This action cannot be undone. This will permanently delete the election
                  and all associated positions and candidates.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>Cancel</AlertDialogCancel>
                <AlertDialogAction onClick={handleDelete} className="bg-destructive text-destructive-foreground">
                  Delete
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </div>
      </div>

      <Tabs defaultValue="positions" className="space-y-4">
        <TabsList>
          <TabsTrigger value="positions">Positions ({positions.length})</TabsTrigger>
          <TabsTrigger value="candidates">Candidates ({candidates.length})</TabsTrigger>
        </TabsList>

        <TabsContent value="positions">
          <div className="mb-4 flex justify-between items-center">
            <h3 className="text-lg font-medium">Election Positions</h3>
            <Link href="/admin/positions/create">
              <Button variant="outline" size="sm">Add Position</Button>
            </Link>
          </div>
          
          {/* Render positions table */}
          <Card>
            <CardContent className="p-0">
              {positions.length === 0 ? (
                <div className="flex flex-col items-center justify-center p-6 text-center">
                  <AlertTriangle className="h-8 w-8 text-amber-500 mb-2" />
                  <h3 className="text-lg font-medium">No Positions Found</h3>
                  <p className="text-muted-foreground mt-1">
                    This election doesn't have any positions defined yet.
                  </p>
                  <Link href="/admin/positions/create" className="mt-4">
                    <Button variant="default" size="sm">Add Position</Button>
                  </Link>
                </div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Position Name</TableHead>
                      <TableHead>Candidates</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {positions.map((position) => {
                      // Find candidates for this position
                      const positionCandidates = candidates.filter(
                        candidate => candidate.position_id === position.id
                      );
                      
                      return (
                        <TableRow key={position.id}>
                          <TableCell className="font-medium">{position.name}</TableCell>
                          <TableCell>{positionCandidates.length} candidates</TableCell>
                          <TableCell className="text-right">
                            <div className="flex justify-end gap-2">
                              <Link href={`/admin/positions/${position.id}/edit`}>
                                <Button variant="ghost" size="sm">Edit</Button>
                              </Link>
                            </div>
                          </TableCell>
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="candidates">
          <div className="mb-4 flex justify-between items-center">
            <h3 className="text-lg font-medium">Election Candidates</h3>
            <Link href="/admin/candidates/create">
              <Button variant="outline" size="sm">Add Candidate</Button>
            </Link>
          </div>
          
          {/* Render candidates table */}
          <Card>
            <CardContent className="p-0">
              {candidates.length === 0 ? (
                <div className="flex flex-col items-center justify-center p-6 text-center">
                  <UserCircle className="h-8 w-8 text-gray-400 mb-2" />
                  <h3 className="text-lg font-medium">No Candidates Found</h3>
                  <p className="text-muted-foreground mt-1">
                    This election doesn't have any candidates yet.
                  </p>
                  <Link href="/admin/candidates/create" className="mt-4">
                    <Button variant="default" size="sm">Add Candidate</Button>
                  </Link>
                </div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Candidate</TableHead>
                      <TableHead>Position</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {candidates.map((candidate) => {
                      // Find position for this candidate
                      const position = positions.find(p => p.id === candidate.position_id);
                      
                      return (
                        <TableRow key={candidate.id}>
                          <TableCell>
                            <div className="flex items-center gap-3">
                              {candidate.photo ? (
                                <img 
                                  src={candidate.photo} 
                                  alt={candidate.name}
                                  className="h-8 w-8 rounded-full object-cover"
                                />
                              ) : (
                                <UserCircle className="h-8 w-8 text-gray-400" />
                              )}
                              <span className="font-medium">{candidate.name}</span>
                            </div>
                          </TableCell>
                          <TableCell>{position ? position.name : "Unknown Position"}</TableCell>
                          <TableCell className="text-right">
                            <div className="flex justify-end gap-2">
                              <Link href={`/admin/candidates/${candidate.id}/edit`}>
                                <Button variant="ghost" size="sm">Edit</Button>
                              </Link>
                            </div>
                          </TableCell>
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/elections/page.jsx
FILE CONTENTS:
"use client"

import React from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { PlusCircle, Trash2 } from "lucide-react"
import { Link } from "@inertiajs/react"
import { Badge } from "@/components/ui/badge"

export default function ElectionsPage({ elections }) {
  const getStatusBadge = (status) => {
    const statusStyles = {
      Active: "bg-green-100 text-green-800 hover:bg-green-100",
      Inactive: "bg-gray-100 text-gray-800 hover:bg-gray-100",
      Upcoming: "bg-blue-100 text-blue-800 hover:bg-blue-100",
      Passed: "bg-amber-100 text-amber-800 hover:bg-amber-100"
    }
    
    return (
      <Badge className={statusStyles[status] || "bg-gray-100"} variant="outline">
        {status}
      </Badge>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Elections</h2>
          <p className="text-muted-foreground">Manage your elections here.</p>
        </div>
        <Button asChild>
          <Link href="/admin/elections/create">
            <PlusCircle className="mr-2 h-4 w-4" />
            Create Election
          </Link>
        </Button>
      </div>

      <Card>
        <CardHeader className="flex flex-row items-center">
          <CardTitle>All Elections</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Title</TableHead>
                <TableHead>Course</TableHead>
                <TableHead>Section</TableHead>
                <TableHead>Start Date</TableHead>
                <TableHead>End Date</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {elections.length > 0 ? (
                elections.map((election) => (
                  <TableRow key={election.id}>
                    <TableCell className="font-medium">{election.title}</TableCell>
                    <TableCell>{election.course ? election.course.name : "N/A"}</TableCell>
                    <TableCell>{election.section || "N/A"}</TableCell>
                    <TableCell>{election.start_date}</TableCell>
                    <TableCell>{election.end_date}</TableCell>
                    <TableCell>{getStatusBadge(election.status)}</TableCell>
                    <TableCell className="text-right">
                      <Button variant="ghost" size="sm" asChild>
                        <Link href={`/admin/elections/${election.id}`}>View</Link>
                      </Button>
                      <Button variant="ghost" size="sm" asChild>
                        <Link href={`/admin/elections/${election.id}/edit`}>Edit</Link>
                      </Button>
                      <Button variant="ghost" size="sm" className="text-destructive">
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center py-6 text-muted-foreground">
                    No elections found. Create a new election to get started.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  )
}---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/page.jsx
FILE CONTENTS:
import AdminLayout from "./layout"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { CalendarDays, Users, Vote, FileText } from "lucide-react"

export default function AdminDashboard() {
  // Mock statistics data that would come from your backend
  const stats = {
    totalElections: 12,
    totalPositions: 24,
    totalCandidates: 48,
    totalVoters: 2350,
  }

  return (
    <AdminLayout>
      <div className="space-y-5">
        <div>
          <h2 className="text-2xl font-bold tracking-tight md:text-3xl">Dashboard</h2>
          <p className="text-muted-foreground">Overview of your voting system.</p>
        </div>

        <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 xl:grid-cols-4">
          <Card className="w-full">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Elections</CardTitle>
              <CalendarDays className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.totalElections}</div>
              <p className="text-xs text-muted-foreground">3 active, 9 completed</p>
            </CardContent>
          </Card>
          <Card className="w-full">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Positions</CardTitle>
              <FileText className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.totalPositions}</div>
              <p className="text-xs text-muted-foreground">Across all elections</p>
            </CardContent>
          </Card>
          <Card className="w-full">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Candidates</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.totalCandidates}</div>
              <p className="text-xs text-muted-foreground">Across all elections</p>
            </CardContent>
          </Card>
          <Card className="w-full">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Registered Voters</CardTitle>
              <Vote className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.totalVoters}</div>
              <p className="text-xs text-muted-foreground">+180 from last month</p>
            </CardContent>
          </Card>
        </div>

        <div className="grid gap-4 grid-cols-1 lg:grid-cols-3">
          <Card className="w-full lg:col-span-2">
            <CardHeader>
              <CardTitle>Recent Elections</CardTitle>
              <CardDescription>Overview of your most recent elections.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[250px] md:h-[300px] rounded-md border border-dashed flex items-center justify-center">
                <p className="text-muted-foreground">Election activity chart</p>
              </div>
            </CardContent>
          </Card>
          <Card className="w-full">
            <CardHeader>
              <CardTitle>Voter Turnout</CardTitle>
              <CardDescription>Voter participation across elections.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[250px] md:h-[300px] rounded-md border border-dashed flex items-center justify-center">
                <p className="text-muted-foreground">Voter turnout chart</p>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
          <Card className="w-full">
            <CardHeader>
              <CardTitle>Active Elections</CardTitle>
              <CardDescription>Currently ongoing elections.</CardDescription>
            </CardHeader>
            <CardContent className="px-2">
              <div className="space-y-3">
                <div className="flex items-center p-2 rounded-md hover:bg-muted/50">
                  <div className="mr-3 h-2 w-2 rounded-full bg-green-500"></div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium truncate">Student Council Election 2025</p>
                    <p className="text-xs text-muted-foreground">Ends in 5 days</p>
                  </div>
                  <div className="text-sm font-medium ml-2">68% turnout</div>
                </div>
                <div className="flex items-center p-2 rounded-md hover:bg-muted/50">
                  <div className="mr-3 h-2 w-2 rounded-full bg-green-500"></div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium truncate">Computer Science Department Election</p>
                    <p className="text-xs text-muted-foreground">Ends in 2 days</p>
                  </div>
                  <div className="text-sm font-medium ml-2">42% turnout</div>
                </div>
                <div className="flex items-center p-2 rounded-md hover:bg-muted/50">
                  <div className="mr-3 h-2 w-2 rounded-full bg-green-500"></div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium truncate">Engineering Faculty Election</p>
                    <p className="text-xs text-muted-foreground">Ends in 10 days</p>
                  </div>
                  <div className="text-sm font-medium ml-2">35% turnout</div>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card className="w-full">
            <CardHeader>
              <CardTitle>Upcoming Elections</CardTitle>
              <CardDescription>Elections scheduled to start soon.</CardDescription>
            </CardHeader>
            <CardContent className="px-2">
              <div className="space-y-3">
                <div className="flex items-center p-2 rounded-md hover:bg-muted/50">
                  <div className="mr-3 h-2 w-2 rounded-full bg-blue-500"></div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium truncate">Business School Election</p>
                    <p className="text-xs text-muted-foreground">Starts in 2 days</p>
                  </div>
                </div>
                <div className="flex items-center p-2 rounded-md hover:bg-muted/50">
                  <div className="mr-3 h-2 w-2 rounded-full bg-blue-500"></div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium truncate">Arts Department Election</p>
                    <p className="text-xs text-muted-foreground">Starts in 5 days</p>
                  </div>
                </div>
                <div className="flex items-center p-2 rounded-md hover:bg-muted/50">
                  <div className="mr-3 h-2 w-2 rounded-full bg-blue-500"></div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium truncate">Student Union Election</p>
                    <p className="text-xs text-muted-foreground">Starts in 12 days</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card className="w-full">
            <CardHeader>
              <CardTitle>Recent Activity</CardTitle>
              <CardDescription>Latest actions in the system.</CardDescription>
            </CardHeader>
            <CardContent className="px-2">
              <div className="space-y-3">
                <div className="flex items-start p-2 rounded-md hover:bg-muted/50">
                  <div className="mr-3 mt-0.5 h-2 w-2 rounded-full bg-gray-500"></div>
                  <div>
                    <p className="text-sm font-medium">New candidate registered</p>
                    <p className="text-xs text-muted-foreground">Morgan Wilson for Secretary</p>
                    <p className="text-xs text-muted-foreground">10 minutes ago</p>
                  </div>
                </div>
                <div className="flex items-start p-2 rounded-md hover:bg-muted/50">
                  <div className="mr-3 mt-0.5 h-2 w-2 rounded-full bg-gray-500"></div>
                  <div>
                    <p className="text-sm font-medium">Election created</p>
                    <p className="text-xs text-muted-foreground">Student Union Election 2025</p>
                    <p className="text-xs text-muted-foreground">2 hours ago</p>
                  </div>
                </div>
                <div className="flex items-start p-2 rounded-md hover:bg-muted/50">
                  <div className="mr-3 mt-0.5 h-2 w-2 rounded-full bg-gray-500"></div>
                  <div>
                    <p className="text-sm font-medium">Voter batch imported</p>
                    <p className="text-xs text-muted-foreground">150 new voters added</p>
                    <p className="text-xs text-muted-foreground">Yesterday at 4:30 PM</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </AdminLayout>
  )
}

---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/layout.jsx
FILE CONTENTS:
"use client"
import { AdminSidebar } from "@/components/admin/sidebar"
import { AdminHeader } from "@/components/ui/admin/admin-header"
import { SidebarProvider, SidebarInset } from "@/components/ui/sidebar"

export default function AdminLayout({ children }) {
  return (
    <SidebarProvider defaultOpen={true}>
      <div
        className="flex min-h-screen overflow-hidden bg-background"
        style={{ "--sidebar-width": "12rem", "--sidebar-width-icon": "3rem" }}
      >
        <AdminSidebar />
        <SidebarInset className="flex flex-col w-full">
          <AdminHeader />
          <main className="flex-1 p-4 md:p-6 overflow-auto">
            <div className="w-full">{children}</div>
          </main>
        </SidebarInset>
      </div>
    </SidebarProvider>
  )
}

---END OF FILE---
FULL PATH: /home/rick110/Downloads/110/VotingSystem/resources/js/Pages/Admin/Auth/AdminLogin.jsx
FILE CONTENTS:
import { useState } from "react";
import { router } from "@inertiajs/react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";

export default function AdminLogin() {
    const [formData, setFormData] = useState({
        email: "",
        password: "",
    });

    const [errors, setErrors] = useState({});

    const handleChange = (e) => {
        setFormData({
            ...formData,
            [e.target.name]: e.target.value,
        });
    };

    const handleSubmit = (e) => {
        e.preventDefault();

        router.post("/admin/login", formData, {
            onSuccess: () => {
                router.visit("/admin/dashboard");
            },
            onError: (error) => {
                setErrors(error);
            },
        });
    };

    return (
        <div className="flex justify-center items-center min-h-screen bg-gray-100">
            <Card className="w-full max-w-md shadow-lg rounded-xl">
                <CardHeader>
                    <CardTitle className="text-center">Admin Login</CardTitle>
                </CardHeader>
                <CardContent>
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div>
                            <Label>Email</Label>
                            <Input
                                type="email"
                                name="email"
                                value={formData.email}
                                onChange={handleChange}
                                placeholder="Enter admin email"
                                required
                            />
                            {errors.email && <p className="text-red-500">{errors.email}</p>}
                        </div>
                        <div>
                            <Label>Password</Label>
                            <Input
                                type="password"
                                name="password"
                                value={formData.password}
                                onChange={handleChange}
                                placeholder="Enter password"
                                required
                            />
                            {errors.password && <p className="text-red-500">{errors.password}</p>}
                        </div>
                        <Button type="submit" className="w-full">
                            Login
                        </Button>
                    </form>
                </CardContent>
            </Card>
        </div>
    );
}
---END OF FILE---
